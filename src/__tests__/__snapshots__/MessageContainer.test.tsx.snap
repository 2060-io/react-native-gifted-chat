// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render <MessageContainer /> and compare with snapshot 1`] = `
<View
  style={
    {
      "height": "100%",
    }
  }
>
  <View
    style={
      {
        "height": "100%",
      }
    }
  >
    <View
      style={
        {
          "flex": 1,
          "overflow": "hidden",
          "transform": [
            {
              "scaleY": -1,
            },
          ],
        }
      }
    >
      <RCTScrollView
        ListEmptyComponent={[Function]}
        ListFooterComponent={[Function]}
        ListHeaderComponent={[Function]}
        applyWindowCorrection={[Function]}
        automaticallyAdjustContentInsets={false}
        canChangeSize={true}
        contentContainerStyle={
          {
            "backgroundColor": undefined,
            "minHeight": 1,
            "minWidth": 1,
            "paddingLeft": 0,
            "paddingRight": 0,
          }
        }
        contentHeight={0}
        contentWidth={0}
        data={[]}
        dataProvider={
          DataProvider {
            "_data": [],
            "_firstIndexToProcess": 0,
            "_hasStableIds": true,
            "_requiresDataChangeHandling": false,
            "_size": 0,
            "getStableId": [Function],
            "rowHasChanged": [Function],
          }
        }
        disableRecycling={false}
        estimatedItemSize={100}
        extendedState={
          {
            "value": [
              null,
              false,
            ],
          }
        }
        externalScrollView={[Function]}
        extraData={
          [
            null,
            false,
          ]
        }
        finalRenderAheadOffset={250}
        forceNonDeterministicRendering={true}
        horizontal={false}
        initialOffset={0}
        initialRenderIndex={0}
        inverted={true}
        isHorizontal={false}
        keyExtractor={[Function]}
        keyboardDismissMode="none"
        keyboardShouldPersistTaps={true}
        layoutProvider={
          GridLayoutProviderWithProps {
            "_acceptableRelayoutDelta": 1,
            "_getHeightOrWidth": [Function],
            "_getLayoutTypeForIndex": [Function],
            "_getSpan": [Function],
            "_hasExpired": false,
            "_maxSpan": 1,
            "_setLayoutForType": [Function],
            "_tempDim": {
              "height": 0,
              "width": 0,
            },
            "averageWindow": AverageWindow {
              "currentAverage": 100,
              "currentCount": 1,
              "inputValues": [
                100,
              ],
              "nextIndex": 1,
            },
            "defaultEstimatedItemSize": 100,
            "layoutObject": {
              "size": undefined,
              "span": undefined,
            },
            "props": {
              "ListEmptyComponent": [Function],
              "ListFooterComponent": [Function],
              "ListHeaderComponent": [Function],
              "automaticallyAdjustContentInsets": false,
              "data": [],
              "estimatedItemSize": 100,
              "extraData": [
                null,
                false,
              ],
              "inverted": true,
              "keyExtractor": [Function],
              "keyboardDismissMode": "none",
              "keyboardShouldPersistTaps": true,
              "numColumns": 1,
              "onEndReached": [Function],
              "onEndReachedThreshold": 0.1,
              "onLayout": [Function],
              "onScroll": [Function],
              "renderItem": [Function],
              "scrollEventThrottle": 100,
            },
            "renderWindowInsets": {
              "height": 0,
              "width": 0,
            },
            "shouldRefreshWithAnchoring": true,
          }
        }
        maxRenderAhead={750}
        numColumns={1}
        onEndReached={[Function]}
        onEndReachedThreshold={0}
        onEndReachedThresholdRelative={0.1}
        onItemLayout={[Function]}
        onLayout={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onSizeChanged={[Function]}
        onVisibleIndicesChanged={[Function]}
        removeClippedSubviews={false}
        renderAheadOffset={0}
        renderAheadStep={250}
        renderContentContainer={[Function]}
        renderItem={[Function]}
        renderItemContainer={[Function]}
        rowRenderer={[Function]}
        scrollEventThrottle={100}
        scrollThrottle={16}
        scrollViewProps={
          {
            "contentContainerStyle": {
              "backgroundColor": undefined,
              "minHeight": 1,
              "minWidth": 1,
              "paddingLeft": 0,
              "paddingRight": 0,
            },
            "onLayout": [Function],
            "onScrollBeginDrag": [Function],
            "refreshControl": undefined,
            "style": {
              "minHeight": 1,
              "minWidth": 1,
            },
          }
        }
        style={
          {
            "minHeight": 1,
            "minWidth": 1,
          }
        }
        suppressBoundedSizeException={true}
        windowCorrectionConfig={
          {
            "applyToInitialOffset": true,
            "applyToItemScroll": true,
            "value": {
              "endCorrection": 0,
              "startCorrection": 0,
              "windowShift": -1,
            },
          }
        }
      >
        <View>
          <View
            style={
              {
                "flexDirection": "column",
              }
            }
          >
            <View
              style={
                {
                  "paddingLeft": 0,
                  "paddingTop": 0,
                }
              }
            />
            <View
              style={
                [
                  undefined,
                  {
                    "transform": [
                      {
                        "scaleY": -1,
                      },
                    ],
                  },
                ]
              }
            >
              <View
                collapsable={false}
                style={
                  {
                    "backgroundColor": "#f0f0f0",
                    "borderRadius": 15,
                    "height": 0,
                    "marginBottom": 0,
                    "marginLeft": 8,
                    "transform": [
                      {
                        "translateY": 200,
                      },
                    ],
                    "width": 45,
                  }
                }
              />
            </View>
            <AutoLayoutView
              enableInstrumentation={false}
              horizontal={false}
              onBlankAreaEvent={[Function]}
              onLayout={[Function]}
              renderAheadOffset={0}
              scrollOffset={0}
              style={
                {
                  "height": 0,
                  "width": 0,
                }
              }
              windowSize={0}
            />
            <View
              style={
                {
                  "height": "100%",
                }
              }
            />
            <CellContainer
              index={-1}
              style={
                [
                  undefined,
                  {
                    "transform": [
                      {
                        "scaleY": -1,
                      },
                    ],
                  },
                ]
              }
            >
              <View
                style={
                  {
                    "flex": 1,
                  }
                }
              />
            </CellContainer>
            <View
              style={
                {
                  "paddingBottom": 0,
                  "paddingRight": 0,
                }
              }
            />
          </View>
        </View>
      </RCTScrollView>
    </View>
  </View>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": undefined,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "flexGrow": 1,
        "justifyContent": "flex-start",
      }
    }
  />
</View>
`;
